#include "../crypto_i.h"
#include <string.h>

#define SMALL_PRIME_COUNT 4
static WORD SMALL_PRIMES[SMALL_PRIME_COUNT] = { 3, 5, 7, 11 };

static WORD ProbablePrime(BI_DIGIT *, DWORD);
static WORD SmallFactor(BI_DIGIT *, DWORD);
static WORD FermatTest(BI_DIGIT *, DWORD);

/* Generates a probable prime a between b and c such that a-1 is
   divisible by d.

   Lengths: a[digits], b[digits], c[digits], d[digits].
   Assumes b < c, digits < MAX_BI_DIGITS.
   
   Returns RE_NEED_RANDOM if randomStruct not seeded, RE_DATA if
   unsuccessful.
 */
BOOL GeneratePrime(BI_DIGIT *a, BI_DIGIT *b, BI_DIGIT *c, BI_DIGIT *d, DWORD digits)
{
  BYTE block[MAX_BI_DIGITS * BI_DIGIT_LEN];
  BI_DIGIT t[MAX_BI_DIGITS], u[MAX_BI_DIGITS];

  /* Generate random number between b and c.
   */
  RAND_GetBytes(block, digits * BI_DIGIT_LEN);

  BI_Decode (a, digits, block, (WORD) (digits * BI_DIGIT_LEN));
  BI_Sub (t, c, b, digits);
  BI_ASSIGN_DIGIT (u, 1, digits);
  BI_Add (t, t, u, digits);
  BI_Mod (a, a, digits, t, digits);
  BI_Add (a, a, b, digits);

  /* Adjust so that a-1 is divisible by d.
   */
  BI_Mod (t, a, digits, d, digits);
  BI_Sub (a, a, t, digits);
  BI_Add (a, a, u, digits);
  if (BI_Cmp (a, b, digits) < 0)
    BI_Add (a, a, d, digits);
  if (BI_Cmp (a, c, digits) > 0)
    BI_Sub (a, a, d, digits);

  /* Search to c in steps of d.
   */
  BI_Assign (t, c, digits);
  BI_Sub (t, t, d, digits);

  while (! ProbablePrime (a, digits)) {
    if (BI_Cmp (a, t, digits) > 0)
      return FALSE;
    BI_Add (a, a, d, digits);
  }

  return TRUE;
}

/* Returns nonzero iff a is a probable prime.

   Lengths: a[aDigits].
   Assumes aDigits < MAX_BI_DIGITS.
 */
static WORD ProbablePrime (a, aDigits)
BI_DIGIT *a;
DWORD aDigits;
{
  return (! SmallFactor (a, aDigits) && FermatTest (a, aDigits));
}

/* Returns nonzero iff a has a prime factor in SMALL_PRIMES.

   Lengths: a[aDigits].
   Assumes aDigits < MAX_BI_DIGITS.
 */
static WORD SmallFactor (a, aDigits)
BI_DIGIT *a;
DWORD aDigits;
{
  WORD status;
  BI_DIGIT t[1];
  DWORD i;
  
  status = 0;
  
  for (i = 0; i < SMALL_PRIME_COUNT; i++) {
    BI_ASSIGN_DIGIT (t, SMALL_PRIMES[i], 1);
    if ((aDigits == 1) && ! BI_Cmp (a, t, 1))
      break;
    BI_Mod (t, a, aDigits, t, 1);
    if (BI_Zero (t, 1)) {
      status = 1;
      break;
    }
  }
  
  /* Zeroize sensitive information.
   */
  i = 0;
  memset (t, 0, sizeof (t));

  return (status);
}

/* Returns nonzero iff a passes Fermat's test for witness 2.
   (All primes pass the test, and nearly all composites fail.)
     
   Lengths: a[aDigits].
   Assumes aDigits < MAX_BI_DIGITS.
 */
static WORD FermatTest (a, aDigits)
BI_DIGIT *a;
DWORD aDigits;
{
  WORD status;
  BI_DIGIT t[MAX_BI_DIGITS], u[MAX_BI_DIGITS];
  
  BI_ASSIGN_DIGIT (t, 2, aDigits);
  BI_ModExp (u, t, a, aDigits, a, aDigits);
  
  status = BI_EQUAL (t, u, aDigits);
  
  /* Zeroize sensitive information.
   */
  memset (u, 0, sizeof (u));
  
  return (status);
}
